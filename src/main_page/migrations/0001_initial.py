# Generated by Django 3.2.2 on 2021-05-13 13:25

import ckeditor.fields
from django.db import migrations, models
import main_page.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AboutUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images', verbose_name='Image')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('subtitle', models.CharField(max_length=255, verbose_name='Subtitle')),
                ('text', ckeditor.fields.RichTextField(verbose_name='Text')),
            ],
            options={
                'verbose_name': 'About us',
                'verbose_name_plural': 'About us',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, verbose_name='Username')),
                ('phone_number', models.CharField(help_text='Format: +380XXXXXXXXX', max_length=255, validators=[main_page.validators.phone_number_validator], verbose_name='Phone number')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('message', models.TextField(verbose_name='Message')),
                ('terms_accepted', models.BooleanField(validators=[main_page.validators.terms_accepted_validator], verbose_name='Terms accepted')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('title_uk', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('title_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('title_ru', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('alt', models.CharField(help_text='If image cannot be loaded, then this text will be shown', max_length=255, verbose_name='Alternative text')),
                ('alt_uk', models.CharField(help_text='If image cannot be loaded, then this text will be shown', max_length=255, null=True, verbose_name='Alternative text')),
                ('alt_en', models.CharField(help_text='If image cannot be loaded, then this text will be shown', max_length=255, null=True, verbose_name='Alternative text')),
                ('alt_ru', models.CharField(help_text='If image cannot be loaded, then this text will be shown', max_length=255, null=True, verbose_name='Alternative text')),
                ('file', models.ImageField(upload_to='images', verbose_name='File')),
                ('type', models.CharField(choices=[('NAVBAR_BRAND', 'Navbar brand image'), ('BOTTOM_NAVBAR_BRAND', 'Bottom navbar brand image'), ('HEADER_BACKGROUND', 'Header background image'), ('ABOUT_HAND_FARMING', 'About hand farming image'), ('FACEBOOK_SOCIAL_MEDIA_ICON', 'Facebook social media icon'), ('INSTAGRAM_SOCIAL_MEDIA_ICON', 'Instagram social media icon'), ('YOUTUBE_SOCIAL_MEDIA_ICON', 'Youtube social icon')], max_length=255, unique=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('title_uk', models.CharField(max_length=100, null=True, verbose_name='Title')),
                ('title_en', models.CharField(max_length=100, null=True, verbose_name='Title')),
                ('title_ru', models.CharField(max_length=100, null=True, verbose_name='Title')),
                ('url', models.URLField(verbose_name='URL')),
                ('type', models.CharField(choices=[('FACEBOOK', 'Facebook'), ('INSTAGRAM', 'Instagram'), ('YOUTUBE', 'Youtube'), ('GOOGLE_PLAY', 'Google Play'), ('APP_STORE', 'App Store')], max_length=255, unique=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude')),
                ('lng', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude')),
            ],
            options={
                'verbose_name': 'Map',
                'verbose_name_plural': 'Maps',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='Text')),
                ('text_uk', models.CharField(max_length=255, null=True, verbose_name='Text')),
                ('text_en', models.CharField(max_length=255, null=True, verbose_name='Text')),
                ('text_ru', models.CharField(max_length=255, null=True, verbose_name='Text')),
                ('youtube_video_url', models.URLField(verbose_name='Youtube video url')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='stories', verbose_name='Image')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('title_uk', models.CharField(max_length=255, null=True, verbose_name='Title')),
                ('title_en', models.CharField(max_length=255, null=True, verbose_name='Title')),
                ('title_ru', models.CharField(max_length=255, null=True, verbose_name='Title')),
                ('subtitle', models.CharField(max_length=255, verbose_name='Subtitle')),
                ('subtitle_uk', models.CharField(max_length=255, null=True, verbose_name='Subtitle')),
                ('subtitle_en', models.CharField(max_length=255, null=True, verbose_name='Subtitle')),
                ('subtitle_ru', models.CharField(max_length=255, null=True, verbose_name='Subtitle')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='Text')),
                ('text_uk', models.CharField(max_length=255, null=True, verbose_name='Text')),
                ('text_en', models.CharField(max_length=255, null=True, verbose_name='Text')),
                ('text_ru', models.CharField(max_length=255, null=True, verbose_name='Text')),
                ('type', models.CharField(choices=[('NAVBAR_ABOUT_US', 'Navbar about us'), ('NAVBAR_OUR_IDEA', 'Navbar our idea'), ('NAVBAR_REVIEWS', 'Navbar reviews'), ('NAVBAR_NEWS', 'Navbar news'), ('NAVBAR_CONTACTS', 'Navbar contacts'), ('LANG_SELECTOR_UK_TEXT', 'Language selector ukrainian text'), ('LANG_SELECTOR_RU_TEXT', 'Language selector russian text'), ('LANG_SELECTOR_EN_TEXT', 'Language selector english text'), ('PAGE_MAIN_TITLE', 'Page main title'), ('PAGE_MAIN_SUBTITLE', 'Page main subtitle'), ('GO_TO_STORE_BUTTON_TEXT', 'Go to store button text'), ('YOUTUBE_TITLE', 'Youtube title'), ('YOUTUBE_CHANNEL_NAME', 'Youtube channel name'), ('QUESTIONS_SECTION_TITLE', 'Questions section title'), ('STORIES_SECTION_TITLE', 'Stories section title'), ('STORY_READ_MORE_BUTTON_TEXT', 'Story read more button text'), ('NEWS_SECTION_TITLE', 'News section title'), ('READ_MORE_NEWS_BUTTON_TEXT', 'Read more news button text'), ('CONTACTS_SECTION_TITLE', 'Contacts section title'), ('CONTACTS_ADDRESS_TEXT', 'Contacts address text'), ('CONTACTS_ADDRESS', 'Contacts address'), ('CONTACTS_PHONE_NUMBER_TEXT', 'Contacts phone number text'), ('CONTACTS_PHONE_NUMBER', 'Contacts phone number'), ('CONTACTS_EMAIL_TEXT', 'Contacts email text'), ('CONTACTS_EMAIL', 'Contacts email'), ('FEEDBACK_SECTION_TITLE', 'Feedback section title'), ('FEEDBACK_SECTION_SUBTITLE', 'Feedback section subtitle'), ('FEEDBACK_FORM_NAME_PLACEHOLDER', 'Feedback form name placeholder'), ('FEEDBACK_FORM_PHONE_NUMBER_PLACEHOLDER', 'Feedback form phone number placeholder'), ('FEEDBACK_FORM_EMAIL_PLACEHOLDER', 'Feedback form email placeholder'), ('FEEDBACK_FORM_MESSAGE_PLACEHOLDER', 'Feedback form message placeholder'), ('FEEDBACK_FORM_TERMS_TEXT', 'Feedback form terms text'), ('FEEDBACK_FORM_SUBMIT_BUTTON_TEXT', 'Feedback form submit button text')], max_length=255, unique=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Text',
                'verbose_name_plural': 'Texts',
            },
        ),
    ]
